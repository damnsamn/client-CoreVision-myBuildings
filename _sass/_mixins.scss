/*

This file should hold the global mixins you'll use throughout the rest of the scss.
If you have other mixins which are component specific, they belong at the top of that component's .scss file

*/

// Media query for targeting IE only
@mixin ms-only {
    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
        @content;
    }
}

// Selects elements that are EITHER hovered or focused
@mixin hover-focus {

    &:hover, &:focus, &:active {
        @content;
    }
}

// Applies the correct box-shadow value for panels
@mixin panel-shadow {
    box-shadow: $box-shadow__panel;
}

// Apply fontawesome to ::before or ::after
@mixin fa($style: solid, $icon: f100) {
    display: inline-block;
    font-style: normal;
    font-variant: normal;
    text-rendering: auto;
    line-height: 1;
    font-family: "Font Awesome 5 Pro" !important;
    color: inherit;

    @if ($style == brand) {
        font-weight: 400 !important;
        font-family: "Font Awesome 5 Brands" !important;
    }

    @if ($style == light) {
        font-weight: 300 !important;
    }

    @if ($style == regular) {
        font-weight: 400 !important;
    }

    @if ($style == solid) {
        font-weight: 900 !important;
    }

    content: #{'\"\\'+$icon+'\"'} !important;
    // content: "\f368"
}

// Applies darkened gradient to banner
@mixin banner-gradient {
    background: rgba(0,0,0,0.5);
    background: -moz-linear-gradient(left, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0) 100%);
    background: -webkit-gradient(left top, right top, color-stop(0%, rgba(0,0,0,0.5)), color-stop(100%, rgba(0,0,0,0)));
    background: -webkit-linear-gradient(left, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0) 100%);
    background: -o-linear-gradient(left, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0) 100%);
    background: -ms-linear-gradient(left, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0) 100%);
    background: linear-gradient(to right, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0) 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#000000', endColorstr='#000000', GradientType=1 );
}

// Applies a border that doesn't affect document flow, using ::before
@mixin border($style, $radius:null, $offset:0) {
    &::before {
        content: '';
        position: absolute;
        top: -#{$offset};
        right: -#{$offset};
        left: -#{$offset};
        bottom: -#{$offset};
        border: $style;
        border-radius: $radius;
    }
}

// This mixin will scale down the $size by certain factors per breakpoint.
// Allows text to take up less space on smaller devices.
@mixin font-size($size) {
    $rem: 16px;
    font-size: calc(#{$size} - ((#{$size} - #{$rem}) / 3)) !important;

    @include media-breakpoint-up(md) {
        font-size: $size !important;
    }
}